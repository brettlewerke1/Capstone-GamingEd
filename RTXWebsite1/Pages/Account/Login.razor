@page "/login"

@using RTXWebsite1.Models;
@using RTXWebsite1.Data;
@inject RTXWebsite1.IDbContext.IAccountAccess _account;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;


<h3>Login To Your Account</h3>
<EditForm Model=@account OnValidSubmit="ValidateAccount">
  <DataAnnotationsValidator/>
  <div class="form-group">
    <label for="Username">Username:</label>
    <InputText @bind-Value=account.Username class="form-control" id="Username" />
  </div>
  <ValidationMessage For="@(() => account.Username)"/>
  <div class="form-group">
    <label for="Password">Password:</label>
    <InputText @bind-Value=account.Password class="form-control" id="Password" />
  </div>
  <ValidationMessage For="@(() => account.Password)"/>
  <button type="submit" class="btn btn-primary"> Login</button>
</EditForm>



@code {
    Account account = new Account();
    public string myCookieValue { get; set; } = "";

    async Task ValidateAccount()
    {
        var result = await _account.ValidateAccount(account, _config);

        if(result)
        {
            await localStorage.SetItemAsync("username", account.Account_Username);
            await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "Account", account.Account_Username, DateTime.Now.AddMinutes(1000));
            Cookie.CookieAuth = account.Account_Username;
            //myCookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "cookieName");
            NavManager.NavigateTo("/");
            

        }
    }
    //protected async Task ReadCookies()
    //{

    //    myCookieValue= await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "cookieName");

    //}
}
