@page "/account"

@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject RTXWebsite1.Data.Cookies Cookie;

@inject NavigationManager NavManager

<h1 div class="title-head">Account</h1>
<br />
 

@if (Cookie.UserID == 0)
{
    NavManager.NavigateTo("/");
}



@if (account == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3 div class = "header-head"> <em>  @account[0].Account_Username</em>'s Account Information </h3>
  
    <br/>

    if (player == null)
    {
        <em>Loading...</em>
    }
    else if (player.Count() == 0)
    {
        <p>No classes found.</p>
    }
    else
    {
        
        @foreach (var playInfo  in player)
        {
            <div class="account-info">


            <h4>
                (@playInfo.Course_Tag) @playInfo.Course_Name
            </h4>
            <p>
                IGN: @playInfo.Player_IGN | Coins: @playInfo.Player_Coins
            </p>
            <img src="@playInfo.Avatar_Image" class="avatar"/>
            <button class="btn btn-primary" @onclick="(() => ChangeAvatar(playInfo.Player_ID))">Change Avatar</button>

            </div>
        }
    }
}



<!-- Password Reset -->
<button class="btn btn-primary" @onclick="(() => ResetPassword() )">Reset Password</button>





@code {
    List<Account>? account;
    List<PlayerInformation>? player;

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "WHERE Account_ID = @UserID";

        account = await _data.LoadData<Account, dynamic>( Account.GetSQL() + sql, new { UserID = @Cookie.UserID}, _config.GetConnectionString("RTX"));

        player = await _data.LoadData<PlayerInformation, dynamic>( PlayerInformation.GetSQL() + sql, new { UserID = @Cookie.UserID}, _config.GetConnectionString("RTX"));
    }

    public void ChangeAvatar(int player)
    {
        Cookie.PlayerID = player;
        NavManager.NavigateTo("/account/avatar");
    }



    public void ResetPassword()
    {
        NavManager.NavigateTo("/resetpassword");
    }


}
