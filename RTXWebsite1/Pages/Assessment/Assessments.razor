@page "/assessments"


@using RTXWebsite1.Models;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data


<!--Print the title-->
@if (currentAssess == null)
{
    <p><em>Loading...</em></p> 
}
else
{
    <h1 div class="title-head">@currentAssess[0].AssessHead_Title</h1>
    <br />
    <p>
        Due: @currentAssess[0].AssessHead_EndDate
    </p>
    
}

<!-- If assessmentList exists -->
@if(questionList != null)
{
    // initialize variables
    assessment.pointsEarned = 0;
    assessment.totalPoints = 0;
    int questionNumber = 0;
    string SelectedAnswer ="";

    // boolean to see if it a matching question. 
    bool isMatchingBool = false;

    <EditForm Model="@assessment" OnValidSubmit="@goToResults" >

    <DataAnnotationsValidator/>
    <ValidationSummary />   

    <!-- go through list made from SQL at bottom of file -->
    @foreach (var p in questionList)
    {
            // reset matching boolean to false
            isMatchingBool = false;

            // add points for each question
            assessment.totalPoints = assessment.totalPoints + @p.Assessment_PointsPerQuestion;

            questionNumber++;

            <p>@questionNumber) @p.Assessment_Question</p>

            // lopp through answerList
            foreach( var a in answerList )
            {
                if( a.AssessmentAnswer_AssessmentID == p.Assessment_ID )
                {
                    // if question type is: multiple choice
                    if (@p.Assessment_QuestionType == "MultipleChoice")
                    {
                        <InputRadioGroup @bind-Value=@p.Assessment_Answers>
                            <InputRadio Value="@a.AssessmentAnswer_Answers" /> @a.AssessmentAnswer_Answers &nbsp;
                        </InputRadioGroup>

                    }

                    // if question type is: matching
                    else if (@p.Assessment_QuestionType == "Matching")
                    {

                        // don't want to add first set of options to total number of questions because it was already included when the question was asked
                        if (isMatchingBool)
                        {
                            assessment.totalPoints = assessment.totalPoints + @p.Assessment_PointsPerQuestion;
                        }

                        isMatchingBool = true;

                        
                        <InputSelect @bind-Value=@p.Assessment_Answers>
                            <option value="">Select an Answer</option>

                            @foreach (var z in answerList)
                            {
                                if (@z.AssessmentAnswer_AssessmentID == @p.Assessment_ID)
                                {
                                    // drop down list of answer options
                                    <option value="@z.AssessmentAnswer_Answers">@z.AssessmentAnswer_Answers</option>
                                }
                            }
                        </InputSelect>

                        // if selected matching question is correct
                        if (SelectedAnswer == @a.AssessmentAnswer_CorrectAnswers)
                        {
                            // add to total points earned if selected answer equals the correct answer
                            assessment.pointsEarned = assessment.pointsEarned + @p.Assessment_PointsPerQuestion;
                        }

                        // print a value to be matched with
                        @a.AssessmentAnswer_MatchingAnswer
                    }

                    // if question type is: text
                    else if (@p.Assessment_QuestionType == "Text")
                    {
                        <label for="answer">Answer: </label>
                        <InputText @bind-Value=@p.Assessment_Answers />
                    }
                    <br />
                }
            }
            
            // calculate number of questions answered correctly
            foreach( var myVar in answerList )
            {
                // check if answer is correct
                if(  myVar.AssessmentAnswer_CorrectAnswers != null && @myVar.AssessmentAnswer_CorrectAnswers != "" && myVar.AssessmentAnswer_CorrectAnswers.ToLower() == @p.Assessment_Answers.ToLower() )
                {
                    // add to total points earned
                    assessment.pointsEarned = assessment.pointsEarned + @p.Assessment_PointsPerQuestion;
                }
            }          
            <br/>
        
    } <!--End master loop-->

    <!-- Submits to CalcGrade() -->
    <button type="submit" class="btn btn-primary"> Submit</button>
    <br/>

    </EditForm>
    <br/>
    <br/>

}
else
{
    <p><em>Loading...</em></p>
}


@code {
    RTXWebsite1.Models.Assessment assessment = new RTXWebsite1.Models.Assessment();
    List<AssessHead>? currentAssess;
    List<Assessment>? questionList;
    List<AssessmentAnswers>? answerList = null;


    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "WHERE AssessHead_ID = @ThisModule";
        currentAssess = await _data.LoadData<AssessHead, dynamic>(AssessHead.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));
       
        sql = "WHERE Assessment_AssessHeadID = @ThisModule";
        questionList = await _data.LoadData<Assessment, dynamic>(Assessment.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE AssessmentAnswer_AssessHeadID = @ThisModule";
        answerList = await _data.LoadData<AssessmentAnswers, dynamic>(AssessmentAnswers.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));
    }

    public void goToResults( )
    {
        // navigate to results page while passing in 2 parameters
        NavManager.NavigateTo($"/results/{assessment.pointsEarned}/{assessment.totalPoints}");
    }

}