@page "/assessments"


@using RTXWebsite1.Models;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data



<!--Print the title-->
@if (assessmentHead != null)
{

    foreach (var p in assessmentHead)
    {
        
            <h1 div class="title-head"> @p.AssessHead_Title </h1>
            <br />

          
    }
}

<!-- If assessmentList exists -->
@if (assessmentList != null)
{


    // initialize variables
    assessment.pointsEarned = 0;
    assessment.totalPoints = 0;
    assessmentAnswers.coinsEarned = 0;

    int questionNumber = 0;

    // boolean to see if it a matching question.
    bool isMatchingBool = false;

    <EditForm Model="@assessment" OnValidSubmit="@HandleValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- go through list made from SQL at bottom of file -->
        @foreach (var p in assessmentList)
        {
            // reset matching boolean to false
            isMatchingBool = false;


            // add points for each question
            assessment.totalPoints = assessment.totalPoints + @p.Assessment_PointsPerQuestion;

       

            questionNumber++;

            <h4>@questionNumber) @p.Assessment_Question</h4>

            // lopp through answerList
            if( answerList is not null )
            {
               
            
                foreach (var a in answerList)
                {

                    // if question type is: multiple choice
                    if (@a.AssessmentAnswer_AssessmentID == @p.Assessment_ID && @p.Assessment_QuestionType == "MultipleChoice")
                    {
                        <InputRadioGroup @bind-Value=@p.Assessment_SelectedAnswer>
                            <InputRadio Value="@a.AssessmentAnswer_MultipleChoiceOption" /> @a.AssessmentAnswer_MultipleChoiceOption &nbsp;
                        </InputRadioGroup>

                    }

                    // if question type is: matching
                    if (@a.AssessmentAnswer_AssessmentID == @p.Assessment_ID && @p.Assessment_QuestionType == "Matching")
                    {

                        // don't want to add first set of options to total number of questions because it was already included when the question was asked
                        if (isMatchingBool)
                        {
                            assessment.totalPoints = assessment.totalPoints + @p.Assessment_PointsPerQuestion;
                        }

                        isMatchingBool = true;


                        <InputSelect @bind-Value=@a.AssessmentAnswer_EnteredAnswer>
                            <option value="">Select an Answer</option>

                            @foreach (var z in answerList)
                            {
                                if (@z.AssessmentAnswer_AssessmentID == @p.Assessment_ID)
                                {
                                    // drop down list of answer options
                                    <option>@z.AssessmentAnswer_MatchingDropDownOption</option>
                                }
                            }
                        </InputSelect>

                        // if selected matching question is correct
                        if (@a.AssessmentAnswer_EnteredAnswer == @a.AssessmentAnswer_CorrectAnswers)
                        {
                            // add to total points earned if selected answer equals the correct answer
                            assessment.pointsEarned = assessment.pointsEarned + @p.Assessment_PointsPerQuestion;

                            // also add to totoal coins earned
                            assessmentAnswers.coinsEarned = assessmentAnswers.coinsEarned + @a.AssessmentAnswer_Coins;
                        }

                        // print a value to be matched with
                        @a.AssessmentAnswer_MatchingOption
                        <br />
                        <br />
                    }

                }
            }

            // if question type is: text
            if (@p.Assessment_QuestionType == "Fill_In_Blank")
            {
                <label for="answer">Answer: </label>
                <InputText @bind-Value=@p.Assessment_SelectedAnswer />
            }
            <br />


           

            <!-- You have to check correct answers by looping through the answerList -->
            // if answerList exists
            if( answerList != null )
            {
                // loop through answer list
                foreach( var myVar in answerList )
                {
                    // check if correct answers are null
                    if( myVar.AssessmentAnswer_CorrectAnswers != null && p.Assessment_SelectedAnswer != null )
                    {
                        // check for correct answer
                        if( myVar.AssessmentAnswer_CorrectAnswers.ToLower() == p.Assessment_SelectedAnswer.ToLower() )
                        {
                            // increment points earned
                            assessment.pointsEarned = assessment.pointsEarned + @p.Assessment_PointsPerQuestion;
                            

                            // increment coins earned
                            assessmentAnswers.coinsEarned = assessmentAnswers.coinsEarned + @myVar.AssessmentAnswer_Coins;
                            

                        
                        }                        
                    }

                }
            }
            

         

            <br />


           


    }
     <!--End master loop-->
        <!-- Submits to HandleValidSubmit() -->
        <button type="submit" class="btn btn-primary"> Submit</button>
        <br />

    </EditForm>
    <br />
    <br />

    

}
else
{
    <p><em>Loading...</em></p>
}




@code {
    RTXWebsite1.Models.Assessment assessment = new RTXWebsite1.Models.Assessment();

    RTXWebsite1.Models.AssessmentAnswers assessmentAnswers = new RTXWebsite1.Models.AssessmentAnswers();

    List<AssessHead>? assessmentHead;
    List<Assessment>? assessmentList;
    List<AssessmentAnswers>? answerList;

    List<LevelContent>? currentModule;

    List<PlayerInformation>? playerListOne;

    List<PlayerInformation>? playerListTwo;





    List<Grades>? GradesList;





    bool isThereGrade;





    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "WHERE AssessHead_ID = @iamLevelID";
        assessmentHead = await _data.LoadData<AssessHead, dynamic>(AssessHead.GetSQL() + sql, new { iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE Assessment_AssessHeadID = @iamLevelID";
        assessmentList = await _data.LoadData<Assessment, dynamic>(Assessment.GetSQL() + sql, new { iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE AssessmentAnswer_AssessHeadID = @iamLevelID";
        answerList = await _data.LoadData<AssessmentAnswers, dynamic>(AssessmentAnswers.GetSQL() + sql, new { iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE LvlContent_LevelID = @ThisLevel AND LvlContent_ObjectID = @iamLevelID AND Module_ID = 2";
        currentModule = await _data.LoadData<LevelContent, dynamic>(LevelContent.GetSQL() + sql, new { ThisLevel = Cookie.CurrentLvl, iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));
    }


    private async void HandleValidSubmit()
    {

        int earnedPoints = 0;

        int earnedCoins = 0;

        string sql = "";

        
        if( currentModule is not null)
        {
            // If this assessment is part of the unlock criteria
            if( currentModule[0].LvlContent_Unlock == true )
            {
                List<LevelUnlock>? unlockCriteria;
                List<ProgressUnlocks>? playerProgress;

                sql = "WHERE LvlUnlock_LvlContentID = @ContentID";
                unlockCriteria = await _data.LoadData<LevelUnlock, dynamic>(LevelUnlock.GetSQL() + sql, new { ContentID = currentModule[0].LvlContent_ID }, _config.GetConnectionString("RTX"));

                foreach( var critera in unlockCriteria )
                {
                    sql = "WHERE PU_LvlUnlockID = @ThisUnlock";
                    playerProgress = await _data.LoadData<ProgressUnlocks, dynamic>(ProgressUnlocks.GetSQL() + sql, new { ThisUnlock = critera.LvlUnlock_ID }, _config.GetConnectionString("RTX"));

                    if( critera.LvlUnlock_Type == "LIVES" )
                    {
                        int currentTries = playerProgress[0].PU_NumAttempts + 1;
                        if ( currentTries >= critera.LvlUnlock_NumGoal )
                        {
                            sql = "UPDATE `RTX`.`Progress` SET `Progress_CompleteFlag` = true WHERE Progress_ID = @ThisUnlock";
                            await _data.LoadData<ProgressUnlocks, dynamic>(sql, new { ThisUnlock = playerProgress[0].PU_ProgressID }, _config.GetConnectionString("RTX"));
                        }
                        
                        sql = "UPDATE `RTX`.`ProgressUnlocks` SET `PU_NumAttempts` = @newNum WHERE PU_LvlUnlockID = @ThisUnlock";
                        playerProgress = await _data.LoadData<ProgressUnlocks, dynamic>(sql, new { newNum = currentTries, ThisUnlock = critera.LvlUnlock_ID }, _config.GetConnectionString("RTX"));
                    }
                    else if ( critera.LvlUnlock_Type == "SCORE" )
                    {
                        if (assessment.totalPoints != 0 && assessment.pointsEarned/assessment.totalPoints * 100 >= critera.LvlUnlock_NumGoal)
                        {
                            sql = "UPDATE `RTX`.`Progress` SET `Progress_CompleteFlag` = true WHERE Progress_ID = @ThisUnlock";
                            await _data.LoadData<ProgressUnlocks, dynamic>( sql, new { ThisUnlock = playerProgress[0].PU_ProgressID }, _config.GetConnectionString("RTX"));
                        }
                    }
                }
            }
        }




        // Submit coins earned


            // selects player to get current coins for that player below
            sql = "select * from Player where (`Player_ID` = @ThisPlayer)";
            playerListOne = await _data.LoadData<PlayerInformation, dynamic>(sql, new { ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));

            // convert EarnedPoints from string to integer to be added below
            earnedPoints = Convert.ToInt32(assessment.pointsEarned);

            

            // update player coins by what they had plus what they just earned
            sql = "UPDATE `RTX`.`Player` SET `Player_Coins` = @NewCoins WHERE (`Player_ID` = @ThisPlayer)";
            playerListTwo = await _data.LoadData<PlayerInformation, dynamic>(sql, new { NewCoins = playerListOne[0].Player_Coins + assessmentAnswers.coinsEarned, ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));





        // select from grades for a specific player and assessment
        sql = "select * from Grades where (`Grades_PlayerID` = @ThisPlayer) and (`Grades_ObjectID` = @ThisModule)";
        GradesList = await _data.LoadData<Grades, dynamic>(sql, new { ThisPlayer = Cookie.PlayerID, ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));



        if( GradesList != null )
        {

            foreach( var g in GradesList )
            {
                // there is a grade already for this assessment
                isThereGrade = true;

                // update assessment score into gradebook for the logged in user and specific assessment
                sql = "UPDATE `RTX`.`Grades` SET `Grades_Score` = @ThisScore WHERE (`Grades_PlayerID` = @ThisPlayer) and (`Grades_ObjectID` = @ThisModule)";
                await _data.SaveData(sql, new { ThisScore = assessment.pointsEarned, ThisPlayer = Cookie.PlayerID, ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

                // update assessment total score into gradebook for logged in user and specific assessment
                sql = "UPDATE `RTX`.`Grades` SET `Grades_Total` = @ThisScore WHERE (`Grades_PlayerID` = @ThisPlayer) and (`Grades_ObjectID` = @ThisModule)";
                await _data.SaveData(sql, new { ThisScore = assessment.totalPoints, ThisPlayer = Cookie.PlayerID, ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));



            }
        }

        // No grade for current assessment
        if( isThereGrade == false )
        {

            // Inserts assessment score to gradebook for the logged in user and specific assessment
            sql = "insert into Grades (Grades_Score, Grades_Total, Grades_PlayerID, Grades_ObjectID, Grades_ModuleID) values (@ThisScore, @ThisTotal, @ThisPlayer, @ThisModule, 2)";
            await _data.SaveData(sql, new { ThisScore = assessment.pointsEarned, ThisPlayer = Cookie.PlayerID, ThisModule = @Cookie.CurrentModule, ThisTotal = assessment.totalPoints }, _config.GetConnectionString("RTX"));

        }









        // navigate to results page while passing in 2 parameters
        NavManager.NavigateTo("/results");

        

    }
    
   

}