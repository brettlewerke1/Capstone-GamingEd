@page "/assessments"


@using RTXWebsite1.Models;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data



<!--Print the title-->
@if (assessmentList != null)
{
    bool myBool = true;

    foreach (var p in assessmentList)
    {
        // then I have already printed the title
        if (myBool == true)
        {
            <h1 div class="title-head"> TEMP </h1>
            <br />

            myBool = false;
        }
    }
}

<!-- If assessmentList exists -->
@if (assessmentList != null)
{


    // initialize variables
    assessment.pointsEarned = 0;
    assessment.totalPoints = 0;
    assessment.Selected_Answer = "";
    int questionNumber = 0;

    // boolean to see if it a matching question.
    bool isMatchingBool = false;

    <EditForm Model="@assessment" OnValidSubmit="@goToResults">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- go through list made from SQL at bottom of file -->
        @foreach (var p in assessmentList)
        {
            // reset matching boolean to false
            isMatchingBool = false;

            // DEBUGGING
            <p>@p.Assessment_PointsPerQuestion</p>

            // add points for each question
            assessment.totalPoints = assessment.totalPoints + @p.Assessment_PointsPerQuestion;

       

            questionNumber++;

            <h4>@questionNumber) @p.Assessment_Question</h4>

            // lopp through answerList
            if( answerList is not null )
            {
                <p>Answer list is not null</p>
            
                foreach (var a in answerList)
                {

                    // if question type is: multiple choice
                    if (@a.AssessmentAnswer_AssessmentID == @p.Assessment_ID && @p.Assessment_QuestionType == "MultipleChoice")
                    {
                        <InputRadioGroup @bind-Value=@p.Assessment_SelectedAnswer>
                            <InputRadio Value="@a.AssessmentAnswer_MatchingAnswer" /> @a.AssessmentAnswer_MatchingAnswer &nbsp;
                        </InputRadioGroup>

                    }

                    // if question type is: matching
                    if (@a.AssessmentAnswer_AssessmentID == @p.Assessment_ID && @p.Assessment_QuestionType == "Matching")
                    {

                        // don't want to add first set of options to total number of questions because it was already included when the question was asked
                        if (isMatchingBool)
                        {
                            assessment.totalPoints = assessment.totalPoints + @p.Assessment_PointsPerQuestion;
                        }

                        isMatchingBool = true;


                        <InputSelect @bind-Value=@p.Assessment_SelectedAnswer>
                            <option value="">Select an Answer</option>

                            @foreach (var z in answerList)
                            {
                                if (@z.AssessmentAnswer_AssessmentID == @p.Assessment_ID)
                                {
                                    // drop down list of answer options
                                    <option>@z.AssessmentAnswer_Answers</option>
                                }
                            }
                        </InputSelect>

                        // if selected matching question is correct
                        if (@a.AssessmentAnswer_Selected_Answers == @a.AssessmentAnswer_CorrectAnswers)
                        {
                            // add to total points earned if selected answer equals the correct answer
                            assessment.pointsEarned = assessment.pointsEarned + @p.Assessment_PointsPerQuestion;
                        }

                        // print a value to be matched with
                        @a.AssessmentAnswer_MatchingAnswer
                        <br />
                        <br />
                    }

                }
            }

            // if question type is: text
            if (@p.Assessment_QuestionType == "Text")
            {
                <label for="answer">Answer: </label>
                <InputText @bind-Value=@p.Assessment_SelectedAnswer />
            }
            <br />




            // check if answer has been selected
            if (@p.Assessment_SelectedAnswer != null && @p.Assessment_CorrectAnswer != null )
            {

                <p>Selected Answer is not null</p>

                

                // check if answer is correct
                if( @p.Assessment_SelectedAnswer == @p.Assessment_CorrectAnswer  )
                {


                    // increment points earned
                    assessment.pointsEarned = assessment.pointsEarned + @p.Assessment_PointsPerQuestion;   

                    
                }
                
            }
                
            <br />


           


    }
     <!--End master loop-->
        <!-- Submits to CalcGrade() -->

        <p>Total Points: @assessment.totalPoints</p>

        <p>Points Earned: @assessment.pointsEarned </p>

        <button type="submit" class="btn btn-primary"> Submit</button>
        <br />

    </EditForm>
    <br />
    <br />

    

}
else
{
    <p><em>Loading...</em></p>
}




@code {
    RTXWebsite1.Models.Assessment assessment = new RTXWebsite1.Models.Assessment();

    List<AssessHead>? assessmentHead;
    List<Assessment>? assessmentList;
    List<AssessmentAnswers>? answerList;

    List<LevelContent>? currentModule;



    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "WHERE AssessHead_ID = @iamLevelID";
        assessmentHead = await _data.LoadData<AssessHead, dynamic>(AssessHead.GetSQL() + sql, new { iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE Assessment_AssessHeadID = @iamLevelID";
        assessmentList = await _data.LoadData<Assessment, dynamic>(Assessment.GetSQL() + sql, new { iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE AssessmentAnswer_AssessHeadID = @iamLevelID";
        answerList = await _data.LoadData<AssessmentAnswers, dynamic>(AssessmentAnswers.GetSQL() + sql, new { iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE LvlContent_LevelID = @ThisLevel AND LvlContent_ObjectID = @iamLevelID AND Module_ID = 2";
        currentModule = await _data.LoadData<LevelContent, dynamic>(LevelContent.GetSQL() + sql, new { ThisLevel = Cookie.CurrentLvl, iamLevelID = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));
    }


    private async void goToResults()
    {
        
        // navigate to results page while passing in 2 parameters
        NavManager.NavigateTo($"/results/{assessment.pointsEarned}/{assessment.totalPoints}");
        
        @*
        if( currentModule is not null)
        {
            // If this assessment is part of the unlock criteria
            if( currentModule[0].LvlContent_Unlock == true )
            {
                List<LevelUnlock>? unlockCriteria;
                List<ProgressUnlocks>? playerProgress;

                string sql = "WHERE LvlUnlock_LvlContentID = @ContentID";
                unlockCriteria = await _data.LoadData<LevelUnlock, dynamic>(LevelUnlock.GetSQL() + sql, new { ContentID = currentModule[0].LvlContent_ID }, _config.GetConnectionString("RTX"));

                foreach( var critera in unlockCriteria )
                {
                    sql = "WHERE PU_LvlUnlockID = @ThisUnlock";
                    playerProgress = await _data.LoadData<ProgressUnlocks, dynamic>(ProgressUnlocks.GetSQL() + sql, new { ThisUnlock = critera.LvlUnlock_ID }, _config.GetConnectionString("RTX"));

                    if( critera.LvlUnlock_Type == "LIVES" )
                    {
                        int currentLives = playerProgress[0].PU_NumVal - 1;
                        if ( currentLives <= 0 )
                        {
                            sql = "UPDATE `RTX`.`Progress` SET `Progress_CompleteFlag` = true WHERE Progress_ID = @ThisUnlock";
                            await _data.LoadData<ProgressUnlocks, dynamic>(sql, new { ThisUnlock = playerProgress[0].PU_ProgressID }, _config.GetConnectionString("RTX"));
                            if ( currentLives < 0 )
                            {
                                currentLives = 0;
                            }
                        }
                        
                        sql = "UPDATE `RTX`.`ProgressUnlocks` SET `PU_NumVal` = @newNum WHERE PU_LvlUnlockID = @ThisUnlock";
                        playerProgress = await _data.LoadData<ProgressUnlocks, dynamic>(sql, new { newNum = currentLives, ThisUnlock = critera.LvlUnlock_ID }, _config.GetConnectionString("RTX"));
                    }
                    else if ( critera.LvlUnlock_Type == "SCORE" )
                    {
                        if (assessment.totalPoints == 0)
                        {
                            sql = "UPDATE `RTX`.`Progress` SET `Progress_CompleteFlag` = true WHERE Progress_ID = @ThisUnlock";
                            await _data.LoadData<ProgressUnlocks, dynamic>(sql, new { ThisUnlock = playerProgress[0].PU_ProgressID }, _config.GetConnectionString("RTX"));
                        }
                        else if(assessment.pointsEarned/assessment.totalPoints * 100 >= critera.LvlUnlock_NumGoal)
                        {
                            sql = "UPDATE `RTX`.`Progress` SET `Progress_CompleteFlag` = true WHERE Progress_ID = @ThisUnlock";
                            await _data.LoadData<ProgressUnlocks, dynamic>( sql, new { ThisUnlock = playerProgress[0].PU_ProgressID }, _config.GetConnectionString("RTX"));
                        }
                    }
                }
            }
        }

        // navigate to results page while passing in 2 parameters
        NavManager.NavigateTo($"/results/{assessment.pointsEarned}/{assessment.totalPoints}");

        *@

    }
    
   

}