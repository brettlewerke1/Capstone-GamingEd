@page "/results/{EarnedPoints}/{TotalPoints}"



@using RTXWebsite1.Models;

@inject RTXWebsite1.IDbContext.IAssessmentAccess _quiz;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data


<h1 div class="title-head"> Quiz Results </h1>
<br />



<p> Your Score: @EarnedPoints out of @TotalPoints </p>





    @if( quizList != null )
    {
        // tracking number of answers to print labels for matching questions
    int numberOfAnswers = 0;
    int questionNumber = 0;


    <!-- go through list made from SQL at bottom of file -->
   

        <br/> 
        <br/>
        <br/>
        <p>Correct Answers</p>
        <p>===============</p>
    
    @foreach (var p in quizList )
        {
        questionNumber++;
        
                    // if Display_Answers boolean is set to true then show the correct answers (0=true, 1=false because tinyInt)
                    @if( @p.Assessment_Display_Answers == 0  )
                    {


                        <b><p> @questionNumber. @p.Assessment_Question </p></b>
                           
                        // if not a matching question
                        @if( @p.Assessment_Question_Type != "Matching")
                        {
                            
                            foreach( var correctAnswer in answerList )
                            {
                                // display answers
                                if( @correctAnswer.AssessmentAnswer_Assessment_ID == p.Assessment_ID && @correctAnswer.AssessmentAnswer_Correct_Answers != null && correctAnswer.AssessmentAnswer_Correct_Answers != "" )
                                {
                                      <p>Answer: @correctAnswer.AssessmentAnswer_Correct_Answers</p>    
                                }
                        
                            }
                    

                           <br/>

                        }

                        // if a matching question
                        @if (@p.Assessment_Question_Type == "Matching"  )
                        {
                         
                           foreach( var answer in answerList )
                           {


                               if( @answer.AssessmentAnswer_Correct_Answers!= null && answer.AssessmentAnswer_Assessment_ID == p.Assessment_ID )
                               {

                                   numberOfAnswers++;

                                  // display answers
                                   <p> @answer.AssessmentAnswer_Matching_Answer : @answer.AssessmentAnswer_Correct_Answers</p>
                               }
                           }

                           
                        }

                        
                    }
                 
           


        }
    }





@code {

    [Parameter]
    public string EarnedPoints { get; set; }

    [Parameter]
    public string TotalPoints { get; set; }

    List<Assessment>? quizList;

    List<Account>? accountList;

    List<QuizAnswers>? answerList;


    private async Task GetData()
    {
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {

        string sql = "select * from Assessment where Assessment_Number = 1";

        quizList = await _data.LoadData<Assessment, dynamic>(sql, new { UserID = @Cookie.UserID }, _config.GetConnectionString("RTX"));



        string sqlAnswersTable = "select * from AssessmentAnswer";

        answerList = await _data.LoadData<QuizAnswers, dynamic>(sqlAnswersTable, new { UserID = @Cookie.UserID}, _config.GetConnectionString("RTX"));

    }




}