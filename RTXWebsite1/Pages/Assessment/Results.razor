@page "/results"



@using RTXWebsite1.Models;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data




<h1 div class="title-head"> Assessment Results </h1>
<br />



@if( assessmentResultList != null )
{
    foreach( var result in assessmentResultList )
    {
        <p>Your Score: @result.Grades_Score out of @result.Grades_Total</p>
        
    }
}


@if( assessmentList != null )
{
    // tracking number of answers to print labels for matching questions
    int numberOfAnswers = 0;
    int questionNumber = 0;


    <!-- go through list made from SQL at bottom of file -->
        <br/> 
        <br/>
        <br/>
        <p>Correct Answers</p>
        <p>===============</p>
    
    @foreach (var p in assessmentList )
    {
            questionNumber++;

            if( answerList is not null )
            {
                // if Display_Answers boolean is set to true then show the correct answers (0=false, 1=true because tinyInt)
                @if (@p.Assessment_DisplayAnswers == true)
                {
                    <p><b> @questionNumber. @p.Assessment_Question </b></p>

                    // if not a matching question
                    @if (@p.Assessment_QuestionType != "Matching")
                    {
                        foreach (var correctAnswer in answerList)
                        {
                            // display answers
                            if (@correctAnswer.AssessmentAnswer_AssessmentID == p.Assessment_ID && @correctAnswer.AssessmentAnswer_CorrectAnswers != null && correctAnswer.AssessmentAnswer_CorrectAnswers != "")
                            {
                                <p>Answer: @correctAnswer.AssessmentAnswer_CorrectAnswers</p>
                            }
                        }
                        <br />
                    }

                    // if a matching question
                    @if (@p.Assessment_QuestionType == "Matching")
                    {
                        foreach (var answer in answerList)
                        {
                            if (@answer.AssessmentAnswer_CorrectAnswers != null && answer.AssessmentAnswer_AssessmentID == p.Assessment_ID)
                            {
                                numberOfAnswers++;

                                // display answers
                                <p> @answer.AssessmentAnswer_MatchingOption : @answer.AssessmentAnswer_CorrectAnswers</p>
                            }
                        }
                    }
                }
            }
    }
}






<!-- Get info to update the gradebook-->













@if( gradesList == null )
{
    <p>Loading...</p>
}

@if( gradesList!= null )
{
   @foreach(var p in gradesList )
   {
       if( moduleList != null )
        {
            foreach( var m in moduleList )
            {
                if( @p.Grades_ModuleID == @m.Module_ID )
                {

                    // if assignment
                    if( @m.Module_Name == "Assignment")
                    {

                        grades.Summed_Grades_Total += @p.Grades_Total;

                        grades.Summed_Score_Total += (double)@p.Grades_Score;
                    }

                    // or if assessment
                    if( @m.Module_Name == "Asessment" )
                    {

                        grades.Summed_Grades_Total += @p.Grades_Total;

                        grades.Summed_Score_Total += (double)@p.Grades_Score;

                    }

                }
            }            
        }

    


   }    
}

























    @if( grades.Summed_Grades_Total != 0 )
    {
        grades.Calculated_Grade = grades.Summed_Score_Total / grades.Summed_Grades_Total * 100;
    }




    @if( @grades.Calculated_Grade >= 90 )
    {
        grades.LetterGrade = 'A';
    }
    else if( @grades.Calculated_Grade >= 80 )
    {
        grades.LetterGrade = 'B';
    }
    else if( @grades.Calculated_Grade >= 70 )
    {
        grades.LetterGrade = 'C';
    }
    else if( @grades.Calculated_Grade >= 60 )
    {
        grades.LetterGrade = 'D';
    }
    else if( @grades.Calculated_Grade >= 0 )
    {
        grades.LetterGrade = 'F';
    }



    @if( firstPlayerList != null )
    {
        UpdatePlayerGrades( grades.LetterGrade, grades.Calculated_Grade );
    }






@code {


    List<Assessment>? assessmentList;

    // List<PlayerInformation>? player;





    List<AssessmentAnswers>? answerList;




    List<Grades>? assessmentResultList;






    List<PlayerInformation>? firstPlayerList;

    List<PlayerInformation>? secondPlayerList;

    List<PlayerInformation>? thirdPlayerList;




    List<Grades>? gradesList;

    List<Module>? moduleList;



    List<RTXWebsite1.Models.PlayerInformation>? anotherPlayerList;




    bool isThereGrade;






    List<RTXWebsite1.Models.AssessHead>? assessHeadList;

    List<RTXWebsite1.Models.Assignment>? assignmentList;





    RTXWebsite1.Models.Grades grades = new RTXWebsite1.Models.Grades();

    RTXWebsite1.Models.Module modules = new RTXWebsite1.Models.Module();

    RTXWebsite1.Models.PlayerInformation players = new RTXWebsite1.Models.PlayerInformation();




    private async Task GetData()
    {
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {

        string sql = "where Assessment_AssessHeadID = @ThisModule";

        assessmentList = await _data.LoadData<Assessment, dynamic>(Assessment.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "where AssessmentAnswer_AssessHeadID = @ThisModule";
        answerList = await _data.LoadData<AssessmentAnswers, dynamic>(AssessmentAnswers.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule}, _config.GetConnectionString("RTX"));





        sql = "select * from Grades where (`Grades_PlayerID` = @ThisPlayer) and (`Grades_ObjectID` = @ThisModule)";
        assessmentResultList = await _data.LoadData<Grades, dynamic>(sql, new { ThisPlayer = Cookie.PlayerID, ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));







        sql = "select * from Grades where Grades_PlayerID = @ThisPlayer";
        gradesList = await _data.LoadData<RTXWebsite1.Models.Grades, dynamic>(sql, new { ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));

        string secondSQL = "select * from Module";
        moduleList = await _data.LoadData<RTXWebsite1.Models.Module, dynamic>(secondSQL, new {}, _config.GetConnectionString("RTX"));

        string thirdSQL = "select * from Player where Player_ID = @ThisPlayer";
        firstPlayerList = await _data.LoadData<RTXWebsite1.Models.PlayerInformation, dynamic>(thirdSQL, new {ThisPlayer = Cookie.PlayerID}, _config.GetConnectionString("RTX"));

        string fourthSQL = "select * from AssessHead";
        assessHeadList = await _data.LoadData<RTXWebsite1.Models.AssessHead, dynamic>(fourthSQL, new {}, _config.GetConnectionString("RTX"));

        string fifthSQL = "select * from Assignment";
        assignmentList = await _data.LoadData<RTXWebsite1.Models.Assignment, dynamic>(fifthSQL, new {}, _config.GetConnectionString("RTX"));




       




    }





    public async void UpdatePlayerGrades(char letterGrade, double percentageGrade)
    {

        // Update player letter grade
        string sqlThird = "UPDATE `RTX`.`Player` SET `Player_Letter_Grade` = @ThisLetterGrade WHERE Player_ID = @ThisPlayer";
        secondPlayerList = await _data.LoadData<PlayerInformation, dynamic>(sqlThird, new { ThisLetterGrade = letterGrade, ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));

        // Update player percentage grade
        string sqlFour = "UPDATE `RTX`.`Player` SET `Player_Percentage_Grade` = @ThisPercentageGrade WHERE Player_ID = @ThisPlayer";
        thirdPlayerList = await _data.LoadData<PlayerInformation, dynamic>(sqlFour, new { ThisPercentageGrade = percentageGrade, ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));


    }



}