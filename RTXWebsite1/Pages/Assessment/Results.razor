@page "/results/{EarnedPoints}/{TotalPoints}"



@using RTXWebsite1.Models;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data




<h1 div class="title-head"> Assessment Results </h1>
<br />

<p> Your Score: @EarnedPoints out of @TotalPoints </p>
<p> Coins Earned: @EarnedPoints </p>

    @if( assessmentList != null )
    {
    // tracking number of answers to print labels for matching questions
    int numberOfAnswers = 0;
    int questionNumber = 0;


    <!-- go through list made from SQL at bottom of file -->
        <br/> 
        <br/>
        <br/>
        <p>Correct Answers</p>
        <p>===============</p>
    
    @foreach (var p in assessmentList )
        {
            questionNumber++;
            if( answerList is not null )
            {
                // if Display_Answers boolean is set to true then show the correct answers (0=false, 1=true because tinyInt)
                @if (@p.Assessment_DisplayAnswers == true)
                {
                    <p><b> @questionNumber. @p.Assessment_Question </b></p>

                    // if not a matching question
                    @if (@p.Assessment_QuestionType != "Matching")
                    {
                        foreach (var correctAnswer in answerList)
                        {
                            // display answers
                            if (@correctAnswer.AssessmentAnswer_AssessmentID == p.Assessment_ID && @correctAnswer.AssessmentAnswer_CorrectAnswers != null && correctAnswer.AssessmentAnswer_CorrectAnswers != "")
                            {
                                <p>Answer: @correctAnswer.AssessmentAnswer_CorrectAnswers</p>
                            }
                        }
                        <br />
                    }

                    // if a matching question
                    @if (@p.Assessment_QuestionType == "Matching")
                    {
                        foreach (var answer in answerList)
                        {
                            if (@answer.AssessmentAnswer_CorrectAnswers != null && answer.AssessmentAnswer_AssessmentID == p.Assessment_ID)
                            {
                                numberOfAnswers++;

                                // display answers
                                <p> @answer.AssessmentAnswer_MatchingOption : @answer.AssessmentAnswer_CorrectAnswers</p>
                            }
                        }
                    }
                }
            }
        }
    }

@code {

    [Parameter]
    public string? EarnedPoints { get; set; }

    [Parameter]
    public string? TotalPoints { get; set; }

    List<Assessment>? assessmentList;

    List<PlayerInformation>? player;

    List<PlayerInformation>? playerAgain;

    List<AssessmentAnswers>? answerList;

    int earnedPoints = 0;


    private async Task GetData()
    {
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {

        string sql = "where Assessment_AssessHeadID = @ThisModule";

        assessmentList = await _data.LoadData<Assessment, dynamic>(Assessment.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "where AssessmentAnswer_AssessHeadID = @ThisModule";
        answerList = await _data.LoadData<AssessmentAnswers, dynamic>(AssessmentAnswers.GetSQL() + sql, new { ThisModule = @Cookie.CurrentModule}, _config.GetConnectionString("RTX"));



        // selects player to get current coins for that player below
        sql = "select * from Player where (`Player_ID` = @ThisPlayer)";
        player = await _data.LoadData<PlayerInformation, dynamic>(sql, new { ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));


        // convert EarnedPoints from string to integer to be added below
        earnedPoints = Convert.ToInt32(EarnedPoints);

        // update player coins by what they had plus what they just earned
        sql = "UPDATE `RTX`.`Player` SET `Player_Coins` = @NewCoins WHERE (`Player_ID` = @ThisPlayer)";
        playerAgain = await _data.LoadData<PlayerInformation, dynamic>(sql, new { NewCoins = player[0].Player_Coins + earnedPoints, ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));



        // Inserts assessment score to gradebook for the logged in user and specific assessment
        string sqlStringAgain = "insert into Grades (Grades_Score, Grades_Total, Grades_PlayerID, Grades_ObjectID, Grades_ModuleID) values (@ThisScore, @ThisTotal, @ThisPlayer, @ThisModule, 2)";
        await _data.SaveData(sqlStringAgain, new { ThisScore = EarnedPoints, ThisPlayer = Cookie.PlayerID, ThisModule = @Cookie.CurrentModule, ThisTotal = TotalPoints }, _config.GetConnectionString("RTX"));
        
   


        }



}