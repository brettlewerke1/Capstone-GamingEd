@page "/classhome"


@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject RTXWebsite1.Data.Cookies Cookie;

@inject NavigationManager NavManager

@if (Cookie.UserID == 0 || Cookie.CurrentClass == 0)
{
    NavManager.NavigateTo("/");
}

@if (classInfo == null)
{
    // Navigate back to class selection
    <p>Loading...</p>
} 
else
{
    // For things in the list, print the id, name, and desc
    @foreach( var p in classInfo )
    {
        <h1 div class="title-head">
           [@p.Course_Tag] @p.Course_Name
        </h1>
        <hr />
        <p>
            Professor Email: @p.Course_ProfEmail
        </p>
        if (@p.Course_MarketFlag)
        {
            <a href="/marketplace" class="btn btn-primary">Marketplace</a>
        }
        <a href="/viewdiscussions" class="btn btn-primary">Discussion</a>

        <a href="/grades" class = "btn btn-primary">Grades</a>
    }
    @foreach( var p in levelInfo )
    {
        <p @onclick="(() => ChangeLevel(p.Level_ID))">   
            <a href="/level">@p.Level_Name | @p.Level_Desc</a>
        </p>
    }
}

@code {
    List<Course> classInfo = new List<Course>();
    List<Level> levelInfo = new List<Level>();

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // Double check, because next functions will break without this cookie
        if(Cookie.CurrentClass == 0)
        {
            NavManager.NavigateTo("/");
        }

        string classString = "WHERE Course_ID = @Class";
        classInfo = await _data.LoadData<Course, dynamic>(Course.GetSQL() + classString, new { Class = Cookie.CurrentClass }, _config.GetConnectionString("RTX"));

        // Initiate Variables
        levelInfo = new List<Level>();          // Empty list
        List<Level>? nextLevel;                  // Next level helper
        List<Level> levelSection, levelHelp;    // Additional help next level to not override nextLevel

        List<Progress> playerProgress;
        List<LevelUnlock> unlockCriteria;


        // Head Node -> Base Case
        // Player always has access to head node
        string sqlString = "WHERE Level_ID = @HeadNode";
        nextLevel = await _data.LoadData<Level, dynamic>( Level.GetSQL() + sqlString, new { HeadNode = classInfo[0].Course_LevelHeadID }, _config.GetConnectionString("RTX"));
        levelInfo.AddRange(nextLevel);

        // Recursive check rest of tree
        while (nextLevel is not null)
        {

            // New recursion (next depth of tree)
            levelSection = new List<Level>();
            foreach( var p in nextLevel )
            {
                sqlString = "WHERE LevelTree.LevelTree_CurrentLevelID = @Current";
                levelHelp = await _data.LoadData<Level, dynamic>(Level.GetSQLChild() + sqlString, new { Current = p.Level_ID }, _config.GetConnectionString("RTX"));
                levelSection.AddRange( levelHelp );
            }

            // If there are more branches found...
            if (levelSection.Count() != 0 )
            {
                // Start recursion with next branches
                nextLevel = levelSection;

                // Check if player has access to the next levels through unlock criteras
                foreach (var p in levelSection.ToList())
                {
                    // Check progress of player
                    sqlString = "WHERE Progress_LevelTreeID = @thisLevel";
                    playerProgress = await _data.LoadData<Progress, dynamic>(Progress.GetSQL() + sqlString, new { thisLevel = p.LevelTree_ID }, _config.GetConnectionString("RTX"));

                    // If no progress recorded...
                    if (playerProgress.Count() == 0)
                    {
                        // Get the unlock critera for the level
                        sqlString = "WHERE LvlUnlock_LevelTreeID = @thisLevel";
                        unlockCriteria = await _data.LoadData<LevelUnlock, dynamic>(LevelUnlock.GetSQL() + sqlString, new { thisLevel = p.LevelTree_ID }, _config.GetConnectionString("RTX"));

                        // If any unlock criteria is needed to progress, assume not unlocked yet
                        bool unlocked = false;
                        if (unlockCriteria.Count() == 0)
                        {
                            unlocked = true;
                        }

                        // Put the porgress of the player into the database
                        sqlString = "insert into Progress (Progress_PlayerID, Progress_LevelTreeID, Progress_CompleteFlag) values (@ThisPlayer, @ThisLevel, @ThisComplete)";
                        await _data.SaveData(sqlString, new { ThisPlayer = Cookie.PlayerID, ThisLevel = @p.LevelTree_ID, ThisComplete = unlocked }, _config.GetConnectionString("RTX"));
                        
                        // Reset player progress
                        sqlString = "WHERE Progress_LevelTreeID = @thisLevel";
                        playerProgress = await _data.LoadData<Progress, dynamic>(Progress.GetSQL() + sqlString, new { thisLevel = p.LevelTree_ID }, _config.GetConnectionString("RTX"));
                    }

                    // If the complete flag is fufilled...
                    if (playerProgress[0].Progress_CompleteFlag)
                    {
                        // Add the level to the list that can be viewed
                        levelInfo.Add(p);
                    }
                    else
                    {
                        if( nextLevel is not null)
                        {
                            // Don't add the level if not unlocked
                            nextLevel.Remove(p);
                        }   
                    }
                    
                    if (nextLevel is not null)
                    {
                        if (nextLevel.Count() == 0)
                        {
                            nextLevel = null;
                        }
                    }
                }
            }
            else
            {
                // End recurssion
                nextLevel = null;
            }
        } 
    }

    private void ChangeLevel( int levelSelected )
    {
        Cookie.CurrentLvl = levelSelected;
    }
}




