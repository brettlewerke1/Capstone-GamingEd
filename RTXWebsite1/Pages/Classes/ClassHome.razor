@page "/classhome"


@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject RTXWebsite1.Data.Cookies Cookie;

@inject NavigationManager NavManager

@if (Cookie.UserID == 0 || Cookie.CurrentClass == 0)
{
    NavManager.NavigateTo("/");
}

@if (classInfo == null)
{
    // Navigate back to class selection
    <p>Loading...</p>
} 
else
{
    // For things in the list, print the id, name, and desc
    @foreach( var p in classInfo )
    {
        <h1 div class="title-head">
           [@p.Course_Tag] @p.Course_Name
        </h1>
        <hr />
        if (@p.Course_MarketFlag)
        {
            <a href = "/marketplace">Marketplace</a> 
        }
        <a href="/quizzes" @onclick="(() => AccessQuiz(1))" id="@p.Course_ID">Quizzes</a>
        <a href="/viewdiscussions">Discussion</a>
    }
    @foreach( var p in levelInfo )
    {
        <p>
            @p.Level_Name | @p.Level_Desc
        </p>
    }
}

@code {
    List<Course> classInfo = new List<Course>();
    List<Level> levelInfo = new List<Level>();

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if(Cookie.CurrentClass == 0)
        {
            NavManager.NavigateTo("/");
        }

        string classString = "SELECT * FROM Course WHERE Course_ID = @Class";
        classInfo = await _data.LoadData<Course, dynamic>(classString, new { Class = Cookie.CurrentClass }, _config.GetConnectionString("RTX"));

        // Initiate Variables
        levelInfo = new List<Level>();          // Empty list
        List<Level> nextLevel;                  // Next level helper
        List<Level> levelSection, levelHelp;    // Additional help next level to not override nextLevel
        string selectString;

        // Head Node -> Base Case
        string levelString = "WHERE Level_ID = @HeadNode";
        nextLevel = await _data.LoadData<Level, dynamic>( Level.GetSQL() + levelString, new { HeadNode = classInfo[0].Course_LevelHeadID }, _config.GetConnectionString("RTX"));

        // Recursive check rest of tree
        while (nextLevel != null)
        {
            // Add previous recursion
            levelInfo.AddRange( nextLevel );

            // New recursion (next depth of tree)
            levelSection = new List<Level>();
            foreach( var p in nextLevel )
            {
                selectString = "WHERE LevelTree.LevelTree_CurrentLevelID = @Current";
                levelHelp = await _data.LoadData<Level, dynamic>( Level.GetSQLChild() + selectString, new { Current = p.Level_ID }, _config.GetConnectionString("RTX"));
                levelSection.AddRange( levelHelp );
            }

            // If there are more branches found...
            if (levelSection.Count() != 0 )
            {
                // Start recursion with next branches
                nextLevel = levelSection;
            }
            else
            {
                // End recurssion
                nextLevel = null;
            }
        } 
    }

    private async Task AccessQuiz( int number )
    {
        Cookie.Quiz_LevelID = number;
    }

}




