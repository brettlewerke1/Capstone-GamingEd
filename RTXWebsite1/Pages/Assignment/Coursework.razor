@page "/assignment"

@using System.IO
@using System.Text
@inject IWebHostEnvironment env

@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject RTXWebsite1.Data.Cookies Cookie;

@inject NavigationManager NavManager

@if( Cookie.PlayerID == 0 )
{
    NavManager.NavigateTo("/");
}

@if( assignment is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- Assignment Title -->
    <h1 div class="title-head"> @assignment[0].Assignment_Title </h1>
    <br />

    // If something was already submitted by the user
    if( submissions is not null )
    {
        @if( submissions.Count() != 0)
        {
            NavManager.NavigateTo($"/assignmentsubmitted");
        }
    }

    <!-- Please check what kind of file you are submitting -->
    <p>Please check what kind of file you are submitting</p>
    <EditForm Model="@newPost">

        <InputRadioGroup @bind-Value=@newPost.AssignmentS_FileType>

            <InputRadio Value="PDF_File" /> PDF (.pdf) &nbsp; &nbsp;

            <InputRadio Value="Text_File" /> Text (.txt) &nbsp; &nbsp;

            <InputRadio Value="Image_File" /> Image (.jpg/.png) &nbsp; &nbsp;

            <InputRadio Value="Word_File" /> Word Doc (.docx) &nbsp; &nbsp;

            <InputRadio Value="Excel_File" /> Excel(.xls) &nbsp; &nbsp;

        </InputRadioGroup>

    </EditForm>

    <br />

    @if (newPost.AssignmentS_FileType == null)
    {
        <p>Please choose a submission type</p>
    }
    // if assignment type has been chosen allow the user to upload a file
    else if (newPost.AssignmentS_FileType != null)
    {

        <!--Optional Player Comment-->
        <p> Assignment Comment: </p>
        <EditForm Model="@newPost">
            <InputText @bind-Value="@newPost.AssignmentS_Comment" />
        </EditForm>


        <!-- Submit File Here -->
        <EditForm Model="@newPost">
            <InputFile OnChange="@submitAssignment" />
        </EditForm>


        <!-- Display that the file is being uploaded -->
        @((MarkupString)myMarkup)

    }
}




@code{

    // Possible filetypes
    public string PDF_File = "PDF";
    public string Text_File  = "Text";
    public string Image_File = "Image";
    public string Word_File = "Word";
    public string Excel_File = "Excel";

    // model
    List<Assignment>? assignment;
    List<AssignmentSubmissions>? submissions;

    RTXWebsite1.Models.AssignmentSubmissions newPost = new RTXWebsite1.Models.AssignmentSubmissions();

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "WHERE Assignment_ID = @ThisModule";
        assignment = await _data.LoadData<Assignment, dynamic>(Assignment.GetSQL() + sql, new { ThisModule = Cookie.CurrentModule }, _config.GetConnectionString("RTX"));

        sql = "WHERE AssignmentS_AssignmentID = @ThisModule AND AssignmentS_PlayerID = @ThisPlayer";
        submissions = await _data.LoadData<AssignmentSubmissions, dynamic>(AssignmentSubmissions.GetSQL() + sql, new { ThisModule = Cookie.CurrentModule, ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));
    }
    // initialize variables
    string sql = "";
    string base64String = "";
    byte[]? somBytes;
    List<Assignment>? assignmentList;


    string myMarkup = "";

    // get bytes from file
    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }


    private async Task submitAssignment( InputFileChangeEventArgs args )
    {

        myMarkup = "<p class='markup'><em>Submitting your file...</em>.</p>";

        // convert file to base64
        try
        {
            var files = args.GetMultipleFiles();
            foreach (var file in files)
            {
                await using MemoryStream fs = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(fs);


                // convert file to bytes
                somBytes = GetBytes(fs);

                // convert bytes to base64
                base64String = Convert.ToBase64String(somBytes, 0, somBytes.Length);
                System.Diagnostics.Debug.Print("Image 64: " + base64String + Environment.NewLine);
            }
        }


        catch (Exception e)
        {
            System.Diagnostics.Debug.Print("ERROR: " + e.Message + Environment.NewLine);
        }

        sql = "INSERT INTO `RTX`.`AssignmentSubmissions` ( `AssignmentS_AssignmentID`, `AssignmentS_PlayerID`, `AssignmentS_Comment`, `AssignmentS_StringUpload`, `AssignmentS_FileType` ) VALUES ( @ThisModule, @ThisPlayer, @ThisComment, @ThisUpload, @ThisType)";
        await _data.SaveData(sql, new { ThisModule = Cookie.CurrentModule, ThisPlayer = Cookie.PlayerID, ThisComment = newPost.AssignmentS_Comment, ThisUpload = base64String, ThisType = newPost.AssignmentS_FileType }, _config.GetConnectionString("RTX")); 

        NavManager.NavigateTo($"/assignmentsubmitted");

        }

    }
