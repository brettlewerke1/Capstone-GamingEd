@page "/"

@using RTXWebsite1.Models;
@inject RTXWebsite1.IDbContext.IAccountAccess _account;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@if (Cookie.UserID == 0)
{
    <h1 div class="title-head">Login</h1>
    <hr />

    <p>Please login to your account</p>

    <EditForm Model=@account OnValidSubmit="ValidateAccount">

        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="Username">Username:</label>
            <InputText @bind-Value=account.Account_Username class="form-control" id="Username" />
        </div>

        <ValidationMessage For="@(() => account.Account_Username)"/>
        <div class="form-group">
            <label for="Password">Password:</label>
            <InputText @bind-Value=account.Account_Password class="form-control" id="Password" />
        </div>

        <ValidationMessage For="@(() => account.Account_Password)"/>
        <button type="submit" class="btn btn-primary"> Login</button>
    </EditForm>
}
else
{
    <h1 div class="title-head">Home</h1>
    <hr />

    <p>
        You are signed in as: @account.Account_Username
    </p>
     
    <p>
        Welcome to the RTX Gamification Learning Management System... take a look around!
    </p>
        
    
}


@code {
    RTXWebsite1.Models.Account account = new RTXWebsite1.Models.Account();

    async Task ValidateAccount()
    {
        int result = await _account.ValidateAccount(account, _config);

        if(result != 0)
        {
            await localStorage.SetItemAsync("username", account.Account_Username);
            await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "cookieName", account.Account_Username, DateTime.Now.AddMinutes(1000));
            Cookie.UserID = result;
            //myCookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "cookieName");
            NavManager.NavigateTo("/");
        }
    }
}
