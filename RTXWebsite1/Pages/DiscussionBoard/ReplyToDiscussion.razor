@page "/replytodiscussion/{paramDiscussion}"
@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration

@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject NavigationManager NavManager
@inject RTXWebsite1.Data.Cookies Cookie;


@if (discussions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var p in discussions)
    {
        <h2> Discussion Post by: @p.Player_IGN</h2>
        <h2> @p.Discussion_Title </h2>
        <p>@p.Discussion_Desc</p>

        <p>
            <div>@p.Discussion_Date</div>
            -----------------------------------------------    
        </p>
    }
    if(replies != null)
    {
        @foreach (var r in replies)
        {
            <div>
                @r.Post_Content
            </div>
            <p>
                By: @r.Player_IGN at @r.Post_Time
            </p>
            <p>
                -----------------------------------------------    
            </p>
         }    
    }
    <EditForm Model=@disPost OnValidSubmit="postReply">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="DiscussionContent">Content:</label>
            <InputText @bind-Value=disPost.Post_Content class="form-control" id="DiscussionContent" />
        </div>
        <ValidationMessage For="@(() => disPost.Post_Content)"/>
        <button type="submit" class="btn btn-primary"> Submit</button>
    </EditForm>
}

@code {
    [Parameter]
    public string paramDiscussion { get; set; } = "";

    List<DiscussionBoard>? discussions;
    List<DiscussionPost>? replies;
    
    RTXWebsite1.Models.DiscussionPost disPost = new RTXWebsite1.Models.DiscussionPost();

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql, selection;

        // Get Head Post
        sql = @"
        SELECT 
            `DiscussionHead`.`Discussion_ID` AS `Discussion_ID`,
            `DiscussionHead`.`Discussion_Title` AS `Discussion_Title`,
            `DiscussionHead`.`Discussion_Desc` AS `Discussion_Desc`,
            `DiscussionHead`.`Discussion_CourseID` AS `Discussion_CourseID`,
            `DiscussionHead`.`Discussion_Date` AS `Discussion_Date`,
            `DiscussionHead`.`Discussion_PlayerID` AS `Discussion_PlayerID`,
            `Player`.`Player_IGN` AS `Player_IGN`
        FROM
            (`DiscussionHead`
            JOIN `Player` ON ((`DiscussionHead`.`Discussion_PlayerID` = `Player`.`Player_ID`)))";

        selection = "Where `DiscussionHead`.Discussion_ID = @Discussion";

        discussions = await _data.LoadData<DiscussionBoard, dynamic>(sql + selection, new { Discussion = @Cookie.CurrentDiscussion }, _config.GetConnectionString("RTX"));

        // Get Replies
        sql = @"
        SELECT 
            `DiscussionPost`.`Post_ID` AS `Post_ID`,
            `DiscussionPost`.`Post_Content` AS `Post_Content`,
            `DiscussionPost`.`Post_Time` AS `Post_Time`,
            `DiscussionPost`.`Post_PlayerID` AS `Post_PlayerID`,
            `DiscussionPost`.`Post_HeadPostID` AS `Post_HeadPostID`,
            `Player`.`Player_IGN` AS `Player_IGN`
        FROM
            (`DiscussionHead`
            JOIN `DiscussionPost` ON ((`DiscussionHead`.`Discussion_ID` = `DiscussionPost`.`Post_HeadPostID`))
            JOIN `Player` ON ((`DiscussionPost`.`Post_PlayerID` = `Player`.`Player_ID`)))";

        selection = "Where `DiscussionHead`.`Discussion_ID` = @Discussion";

        replies = await _data.LoadData<DiscussionPost, dynamic>(sql + selection, new { Discussion = @Cookie.CurrentDiscussion }, _config.GetConnectionString("RTX"));
    }

    async Task postReply()
    {
        string date = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
        string sql = "insert into DiscussionPost (Post_Content, Post_Time, Post_AccountID, Post_HeadPostID) values (@Content, @Time, @User, @Discussion);";

        await _data.SaveData(sql, new { Content = @disPost.Post_Content, Time = @date, User = @Cookie.UserID, Discussion = @Cookie.CurrentDiscussion }, _config.GetConnectionString("RTX"));

            NavManager.NavigateTo($"/replytodiscussion/{paramDiscussion}", forceLoad: true);

    }
}