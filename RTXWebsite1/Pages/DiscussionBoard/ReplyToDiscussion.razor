@page "/replytodiscussion/{paramDiscussion}"
@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration

@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject NavigationManager NavManager
@inject RTXWebsite1.Data.Cookies Cookie;

@if( Cookie.CurrentDiscussion == 0 || Cookie.PlayerID == 0 )
{
    NavManager.NavigateTo("/");
}

@if (discussHead == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <h1 div class="title-head">@discussHead[0].Discussion_Title </h1>
    <p>Discussion Post by: @discussHead[0].Player_IGN</p>
    <p>@discussHead[0].Discussion_Desc</p>

    <p>@discussHead[0].Discussion_Date</p>
    <p>
        -----------------------------------------------    
    </p>
    if(replies != null)
    {
        @foreach (var r in replies)
        {
            <div>
                @r.Post_Content
            </div>
            <p>
                By: @r.Player_IGN at @r.Post_Time 
            </p>
            @if (player[0].Player_ID == r.Post_PlayerID)
            {
                <button class="btn btn-primary" @onclick="(() => DeletePost(r.Post_ID))">DELETE</button>
            }
            <p>
                -----------------------------------------------    
            </p>
         }    
    }

    if( (discussHead[0].Discussion_CloseDate == "00/00/0000 00:00:00") || (currentTime.CompareTo(DateTime.Parse(discussHead[0].Discussion_CloseDate))) > 0)
    {
        <EditForm Model=@disPost OnValidSubmit="postReply">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="DiscussionContent">Content:</label>
                <InputText @bind-Value=disPost.Post_Content class="form-control" id="DiscussionContent" />
            </div>
            <ValidationMessage For="@(() => disPost.Post_Content)" />
            <button type="submit" class="btn btn-primary"> Submit</button>
        </EditForm>
    }
}

@code {
    [Parameter]
    public string paramDiscussion { get; set; } = "";

    List<DiscussionBoard>? discussHead;
    List<DiscussionPost>? replies;
    List<PlayerInformation>? player;
    DateTime currentTime = DateTime.Now;

    RTXWebsite1.Models.DiscussionPost disPost = new RTXWebsite1.Models.DiscussionPost();

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // Get Head Post
        string sql = "WHERE `DiscussionHead`.`Discussion_ID` = @Discussion";
        discussHead = await _data.LoadData<DiscussionBoard, dynamic>(DiscussionBoard.GetSQL() + sql, new { Discussion = @Cookie.CurrentDiscussion }, _config.GetConnectionString("RTX"));

        // Get Replies
        sql = "WHERE `DiscussionHead`.`Discussion_ID` = @Discussion";
        replies = await _data.LoadData<DiscussionPost, dynamic>(DiscussionPost.GetSQL() + sql, new { Discussion = @Cookie.CurrentDiscussion }, _config.GetConnectionString("RTX"));

        sql = "WHERE Player_ID = @ThisPlayer";
        player = await _data.LoadData<PlayerInformation, dynamic>(PlayerInformation.GetSQL() + sql, new { ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));
    }

    async Task postReply()
    {
        string date = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
        string sql = "insert into DiscussionPost (Post_Content, Post_Time, Post_PlayerID, Post_HeadPostID) values (@Content, @Time, @User, @Discussion);";

        await _data.SaveData(sql, new { Content = @disPost.Post_Content, Time = @date, User = @Cookie.PlayerID, Discussion = @Cookie.CurrentDiscussion }, _config.GetConnectionString("RTX"));

        NavManager.NavigateTo($"/replytodiscussion/{paramDiscussion}", forceLoad: true);
    }

    public async Task DeletePost(int post)
    {
        string sql = "Delete from DiscussionPost where Post_ID = @ThisPost";
        await _data.DeleteData<DiscussionBoard, dynamic>(sql, new { ThisPost = post }, _config.GetConnectionString("RTX"));
        NavManager.NavigateTo($"/replytodiscussion/{paramDiscussion}", forceLoad: true);
    }
}