@page "/viewdiscussions"

@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration

@inject IDatabaseAccess _data
@inject IConfiguration _config
@inject NavigationManager NavManager
@inject RTXWebsite1.Data.Utils util
@inject RTXWebsite1.Data.Cookies Cookie;


<h1 div class="title-head">Discussion Board</h1>

<br />

<h3>View Discussions</h3>
<button class="btn btn-primary" @onclick="NewDiscussion">Post New Discussion</button>
<p>
    -----------------------------------------------
</p>
@if (discussions == null)
{
    <p><em>Nothing here. Start a new post?</em></p>
}
else
{
    @foreach (var p in discussions)
    {
        <p>
            @p.Discussion_Title
        </p>

        <p>
            @p.Discussion_Date | @p.Discussion_Desc
        </p>
       
        <button class="btn btn-primary" @onclick="(() => Reply(p))">Open</button>
        if(Cookie.UserID == p.Discussion_PlayerID)
        {
            <button class="btn btn-primary" @onclick="(() => DeleteDiscussion(p))">DELETE</button>
        }
         <p>
             -----------------------------------------------
        </p>
        
    }
}

@code {
    List<DiscussionBoard>? discussions;
    List<DiscussionBoard>? deletedDiscussion;

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = @"
        SELECT 
            `DiscussionHead`.`Discussion_ID` AS `Discussion_ID`,
            `DiscussionHead`.`Discussion_Title` AS `Discussion_Title`,
            `DiscussionHead`.`Discussion_Desc` AS `Discussion_Desc`,
            `DiscussionHead`.`Discussion_CourseID` AS `Discussion_CourseID`,
            `DiscussionHead`.`Discussion_Date` AS `Discussion_Date`,
            `DiscussionHead`.`Discussion_PlayerID` AS `Discussion_PlayerID`,
            `Player`.`Player_IGN` AS `Player_IGN`
        FROM
            (`DiscussionHead`
            JOIN `Player` ON ((`DiscussionHead`.`Discussion_PlayerID` = `Player`.`Player_ID`)))";

        string selector = "Where DiscussionHead.Discussion_CourseID = @Class";

        discussions = await _data.LoadData<DiscussionBoard, dynamic>(sql + selector, new { Class = Cookie.CurrentClass }, _config.GetConnectionString("RTX"));
    }

    public async Task Reply(DiscussionBoard discussionBoard)
    {
        Cookie.CurrentDiscussion = discussionBoard.Discussion_ID;
        NavManager.NavigateTo($"/replytodiscussion/{discussionBoard.Discussion_Title}");
    }

    public async Task NewDiscussion()
    {
        NavManager.NavigateTo("/newdiscussion");
    }


    public async Task DeleteDiscussion(DiscussionBoard discussionBoard)
    {
        // Delete the posts in the discussion
        string sql = "Delete from DiscussionPost where Post_HeadPostID = @DiscussionID";
        deletedDiscussion = await _data.DeleteData<DiscussionBoard, dynamic>(sql, new { DiscussionID = discussionBoard.Discussion_ID}, _config.GetConnectionString("RTX"));

        // Delete the actual discussion
        sql = "Delete from DiscussionHead where Discussion_ID = @DiscussionID";
        deletedDiscussion = await _data.DeleteData<DiscussionBoard, dynamic>(sql, new { DiscussionID = discussionBoard.Discussion_ID}, _config.GetConnectionString("RTX"));
        NavManager.NavigateTo("/viewdiscussions", forceLoad: true);
    }
}
