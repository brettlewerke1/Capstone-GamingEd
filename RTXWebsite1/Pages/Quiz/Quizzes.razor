@page "/quizzes"


@using RTXWebsite1.Models;

@inject RTXWebsite1.IDbContext.IQuizAccess _quiz;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data

@using System;



<h1 div class="title-head"> Quizzes </h1>
<br />



<!-- If quizList exists -->
@if(quizList != null)
{
    // initialize variables
    quiz.numCorrect = 0;
    quiz.numberOfQuestions = 0;

    bool isText = false;

    <EditForm Model="@quiz" OnValidSubmit="@CalcGrade" >

    <DataAnnotationsValidator/>
    <ValidationSummary />   
    <!-- go through list made from SQL at bottom of file -->
    @foreach (var p in quizList)
    {

            






            <h4>@p.Quiz_Question_Number) @p.Quiz_Question</h4>

  



 
                foreach( var a in answerList )
                {
           
                   // if question type is: multiple choice
                   if( @a.Quiz_ID == @p.Quiz_ID && @p.Question_Type == "mc" )
                   {
                        <InputRadioGroup @bind-Value=@p.Quiz_Answers >
                        <InputRadio Value="@a.Quiz_Answers" /> @a.Quiz_Answers &nbsp;
                        </InputRadioGroup>


                   }

                   // if question type is: matching
                   if( @a.Quiz_ID == @p.Quiz_ID && @p.Question_Type == "Matching")
                   {
                        <InputSelect @bind-Value=@a.Selected_Answers >
                            <option value="">Select an Answer</option>
                            @foreach (var z in answerList )
                            {
                                if( @z.Quiz_ID == @p.Quiz_ID )
                                {

                                      <option>@z.Quiz_Answers</option>
                                      
                                 }



                            }

                       
                            quiz.numberOfQuestions++;
                         

                        </InputSelect>

                            if(  @a.Selected_Answers == @a.Correct_Answers )
                            {
                                quiz.numCorrect++;
                                
                                
                            }
                            
                        
                        @a.Matching_Answer

                        quiz.numberOfQuestions++;

                        <br/>



                        <br/>
                   }


                }

                // if question type is: text
                if( @p.Question_Type == "text" )
                {
                    <label for="answer">Answer: </label>
                    <InputText name="nameOne" @bind-Value=@p.Quiz_Answers   />
                    isText = true;
                }
            


            <br/>

            

            
            
            
         
            

            <!-- If question has been answered -->
            @if( @p.Quiz_Answers != "" )
            {

               // if answered correctly (multiple correct answers)
               @if( @p.Quiz_Answers.ToLower() == @p.Quiz_Correct_Answer_A.ToLower() || @p.Quiz_Answers.ToLower() == @p.Quiz_Correct_Answer_B.ToLower() )
               {

                    // increment number correct count
                    quiz.numCorrect++;
                    

               }
               

               
                          
            }

            
            quiz.numberOfQuestions++;
            <br/>
        
    } <!--End master loop-->


    <!-- Submits to CalcGrade() -->
    <button type="submit" class="btn btn-primary"> Submit</button>
    <br/>

    </EditForm>
    <br/>
    <br/>


    




}
else
{
    <p><em>Loading...</em></p>
}




@code {


    RTXWebsite1.Models.Quiz quiz = new RTXWebsite1.Models.Quiz();
    List<Quiz>? quizList;

    List<QuizAnswers>? answerList;



    private async Task GetData()
    {
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {

        string sql = "select * from Quiz where Quiz_Number = 1";

        quizList = await _data.LoadData<Quiz, dynamic>(sql, new { UserID = @Cookie.UserID }, _config.GetConnectionString("RTX"));

        string answersSQL = "select * from Quiz_Answers_Table";

        answerList = await _data.LoadData<QuizAnswers, dynamic>(answersSQL, new { UserID = @Cookie.UserID }, _config.GetConnectionString("RTX"));

    }


    async Task CalcGrade( )
    {

        // navigate to results page while passing in 2 parameters
        NavManager.NavigateTo($"/results/{quiz.numCorrect}/{quiz.numberOfQuestions}");

    }






}