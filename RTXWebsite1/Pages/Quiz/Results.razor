@page "/results/{NumberCorrect}/{NumberQuestions}"



@using RTXWebsite1.Models;

@inject RTXWebsite1.IDbContext.IQuizAccess _quiz;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IJSRuntime JsRuntime;
@inject IConfiguration _config;
@inject NavigationManager NavManager;
@inject RTXWebsite1.Data.Cookies Cookie;

@using RTXWebsite1.IDbContext
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess _data


<h1 div class="title-head"> Quiz Results </h1>
<br />



<p> Your Score: @NumberCorrect out of @NumberQuestions </p>








    @if( quizList != null )
    {
        // tracking number of answers to print labels for matching questions
    int numberOfAnswers = 0;
    int questionNumber = 0;

    int answerNumber = 0;
    <!-- go through list made from SQL at bottom of file -->
   

        <br/> 
        <br/>
        <br/>
        <p>Correct Answers</p>
        <p>===============</p>
    
    @foreach (var p in quizList )
        {
        questionNumber++;
        if( accountList != null )
            {
                
                    @if( @p.Show_Answer_Bool == "True"  )
                    {

                        

                        <b><p> @questionNumber. @p.Quiz_Question </p></b>
                            
                        @if( @p.Question_Type != "Matching")
                        {

                            foreach( var correctAnswer in answerList )
                            {
                                if( @correctAnswer.Quiz_ID == p.Quiz_ID && @correctAnswer.Correct_Answers != null && correctAnswer.Correct_Answers != "" )
                                {
                                      <p>Answer: @correctAnswer.Correct_Answers</p>    
                                }
                        
                            }
                    

                           <br/>

                        }
                        @if (@p.Question_Type == "Matching"  )
                        {
                          // reset answer number display value
                          answerNumber = 0;

                           foreach( var answer in answerList )
                           {


                               if( @answer.Correct_Answers!= null && answer.Quiz_ID == p.Quiz_ID )
                               {
                                   numberOfAnswers++;

                                   answerNumber++;
                                   <p> Answer #@answerNumber: @answer.Correct_Answers</p>
                               }
                           }

                           
                        }


           
           
                        
                    }
                 
           }

 


     

        }
    }









@code {

    [Parameter]
    public string NumberCorrect { get; set; }

    [Parameter]
    public string NumberQuestions { get; set; }

    List<Quiz>? quizList;

    List<Account>? accountList;

    List<QuizAnswers>? answerList;


    private async Task GetData()
    {
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {

        string sql = "select * from Quiz where Quiz_Number = 1";

        quizList = await _data.LoadData<Quiz, dynamic>(sql, new { UserID = @Cookie.UserID }, _config.GetConnectionString("RTX"));

        string sqlAgain = "select * from Account where Account_ID = @UserID";

        accountList = await _data.LoadData<Account, dynamic>(sqlAgain, new { UserID = @Cookie.UserID}, _config.GetConnectionString("RTX"));

        string sqlAnswersTable = "select * from Quiz_Answers_Table";

        answerList = await _data.LoadData<QuizAnswers, dynamic>(sqlAnswersTable, new { UserID = @Cookie.UserID}, _config.GetConnectionString("RTX"));

    }




}