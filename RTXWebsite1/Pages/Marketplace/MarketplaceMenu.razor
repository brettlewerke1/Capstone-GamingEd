@page "/marketplace"

@using RTXWebsite1.IDbContext
@using RTXWebsite1.Models
@using Microsoft.Extensions.Configuration
@inject RTXWebsite1.Data.Cookies Cookie;

@inject IConfiguration _config
@inject IDatabaseAccess _data

@inject NavigationManager NavManager

<h1 div class="title-head">Market</h1>

<br />


<hr/>

@if ( Cookie.CurrentClass == 0 )
{
    NavManager.NavigateTo("/");
}
else if (transactions == null)
{
    <em>Loading...</em>
}
else
{
    if( player is not null )
    {
        <h2 class="header-head">@player[0].Player_IGN's Total Coins: <em>@player[0].Player_Coins</em></h2>
        <p>----------------------------------------------------------------------------------------------------</p>

        if( transactions.Count() == 0)
        {
            <p>No transactions found.</p>
        }
        else
        {
            if( transactions[0].Transaction_Avatars )
            {
                <a href="/avatars" class="header-head">Purchase Avatars</a>
            }

            if( transactions[0].Transaction_Redo )
            {
                <a href="/lives" class="header-head">Purchase New Attempts</a>
            }

            if( transactions[0].Transaction_ExemptMedal )
            {
                <a href="/exempt" class="header-head">Purchase New Attempts</a>
            }
        }
    }
}

@code{
    List<Marketplace>? transactions;
    List<PlayerInformation>? player;

    private async Task GetData()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from Transaction where Transaction_CourseID = @CourseNum";

        transactions = await _data.LoadData<Marketplace, dynamic>(sql, new { CourseNum = Cookie.CurrentClass}, _config.GetConnectionString("RTX"));

        sql = "WHERE Player_ID = @ThisPlayer";

        player = await _data.LoadData<PlayerInformation, dynamic>(PlayerInformation.GetSQL() + sql, new { ThisPlayer = Cookie.PlayerID }, _config.GetConnectionString("RTX"));
    }
}

